{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to KarreraAI Docs","text":"<p>For more information visit karrera.ai.</p>"},{"location":"#commands","title":"Commands","text":"<p>Create your project doc page in doc/ directory.</p>"},{"location":"#doc-layout","title":"Doc layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages.\n    assets/   # icons, images and files.\n</code></pre>"},{"location":"Personal-AI-APIs/","title":"Documentation for the Personal-AI APIs","text":"<p>This document explains the APIs interactions of the Personal AI backend for the Karrera - Personal AI project. It details the entire flow from user creation to the end results, detailing all the methods with their respective inputs and outputs.</p>"},{"location":"Personal-AI-APIs/#api-interactions","title":"API Interactions","text":"<p>The user will begin by creating a session and then choosing between three different methods for providing the application with information pertaining to himself, searching the web, uploading a resume (CV) or just having a conversation with an AI agent. All three methods can be used in conjunction and will contribute to a better overall understanding of the user. </p> <p>The main order of interaction is detailed in the following diagram:</p> <pre><code>graph LR\n    A[User Init API]\n    B[Upload CV]\n    C[Scrape the Web]\n    subgraph Chat with AI\n        direction LR\n        D1[Create Conversation]\n        D2[Send Chosen Question]\n        D3[Chat Session]\n        D4[Extract Chat Information]\n    end\n    E[Filter Entities]\n    F[JSON Processor]\n\n    A --&gt; B\n    A --&gt; C\n    A --&gt; D1\n    D1 --&gt; D2\n    D2 --&gt; D3\n    D3 --&gt; D4\n    B --&gt; E\n    C --&gt; E\n    D4 --&gt; E\n    E --&gt; F</code></pre>"},{"location":"Personal-AI-APIs/#apis-endpoints","title":"APIs Endpoints","text":""},{"location":"Personal-AI-APIs/#user-init-api","title":"User Init. API:","text":"<p>Creates the User Session, saving all necessary arguments for the session in Redis.</p> <ul> <li>Endpoint = /user_session_init</li> <li> <p>Method = POST</p> <ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session </li> <li>name = User full name</li> </ul> </li> <li>RETURNS:<ul> <li>Start the user session in Redis under {user-id}</li> </ul> </li> </ul> Redis Arguments: <pre><code>.name = name\n.JSON_scrape = ''\n.JSON_cv = ''\n.JSON_chat = ''\n.JSON_scrape_filtered = ''\n.JSON_cv_filtered = ''\n.JSON_chat_filtered = ''\n.JSON_combined = ''\n.bio = ''\n.edited_bio = ''\n.bio_flag = ''\n.working_env = ''\n.user_last_method = ''\n</code></pre> </li> <li> <p>Endpoint = /cv_reader</p> </li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session </li> <li>file = curriculum document (.pdf or .docx)</li> <li>From Redis:<ul> <li>.name = name of the user</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>A JSON file saved in Redis under JSON_cv</li> </ul> </li> </ul> </li> </ul> JSON_example.json<pre><code>{\n   \"entities\":[\n      {\n         \"person\":[\n            {\n               \"name\":\"John Jay Doe\",\n               \"description\":\"Executive with a diverse and international career\",\n               \"date\":\"\",\n               \"source\":[\n                  \"User-sent Document\"\n               ]\n            }\n         ],\n         \"education\":[\n            {\n               \"name\":\"University Of John'Doe\",\n               \"description\":\"MBA\",\n               \"date\":\"2001\",\n               \"source\":[\n                  \"User-sent Document\"\n               ]\n            }\n         ],\n         \"organization\":[\n            {\n               \"name\":\"John Doe Company\",\n               \"description\":\"Vice President\",\n               \"date\":\"\",\n               \"source\":[\n                  \"User-sent Document\"\n               ]\n            }\n         ],\n         \"project\":[\n            {\n               \"name\":\"John Doe's Project\",\n               \"description\":\"Project Description\",\n               \"date\":\"\",\n               \"source\":[\n                  \"User-sent Document\"\n               ]\n            },\n         ],\n   \"relationships\":[\n          {\n             \"source\":\"John Jay Doe\",\n             \"target\":\"University Of John'Doe\",\n             \"relationship\":\"studied at\",\n             \"relationship_strength\":4\n          },\n          {\n             \"source\":\"John Jay Doe\",\n             \"target\":\"John Doe Company\",\n             \"relationship\":\"worked at\",\n             \"relationship_strength\":4\n          },\n          {\n             \"source\":\"John Jay Doe\",\n             \"target\":\"John Doe's Project\",\n             \"relationship\":\"created\",\n             \"relationship_strength\":2\n          },    \n   ]\n}\n</code></pre> Redis Arguments: <pre><code>```\n.JSON_cv = Returned JSON file\n.user_last_method = 'cv'\n```\n</code></pre>"},{"location":"Personal-AI-APIs/#upload-cv","title":"Upload CV:","text":"<p>Reads a curriculum sent by the user, either in .pdf or .docx, and extracts from it a list of entities and relations related to the user.</p>"},{"location":"Personal-AI-APIs/#scrape-the-web","title":"Scrape the Web:","text":"<p>Searches the user by their name on the web and extracts entities and relations pertaining the user from all the text. </p> <ul> <li>Endpoint = /search_from_web</li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session </li> <li>location = optional, (default: us), alters the location of the search. Accepts any country name or iso code, as per country_converter python library.</li> <li>add-info = optional, (default: ''), adds information related to the user to the search, filtering the results, specially if the name is common or has a famous namesake.</li> <li>From Redis:<ul> <li>.name = name of the user</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>A JSON file saved in Redis under JSON_scrape</li> </ul> </li> </ul> </li> </ul> JSON_example.json<pre><code>{\n   \"entities\":[\n      {\n         \"person\":[\n            {\n               \"name\":\"John Jay Doe\",\n               \"description\":\"Executive with a diverse and international career\",\n               \"date\":\"\",\n               \"source\":[\n                  \"https://www.example-site.com\"\n               ]\n            }\n         ],\n         \"education\":[\n            {\n               \"name\":\"University Of John'Doe\",\n               \"description\":\"MBA\",\n               \"date\":\"2001\",\n               \"source\":[\n                  \"https://www.example-site2.com\"\n               ]\n            }\n         ],\n         \"organization\":[\n            {\n               \"name\":\"John Doe Company\",\n               \"description\":\"Vice President\",\n               \"date\":\"\",\n               \"source\":[\n                  \"https://www.example-site2.com\"\n               ]\n            }\n         ],\n         \"project\":[\n            {\n               \"name\":\"John Doe's Project\",\n               \"description\":\"Project Description\",\n               \"date\":\"\",\n               \"source\":[\n                  \"https://www.example-site3.com\"\n               ]\n            },\n         ],\n   \"relationships\":[\n          {\n             \"source\":\"John Jay Doe\",\n             \"target\":\"University Of John'Doe\",\n             \"relationship\":\"studied at\",\n             \"relationship_strength\":4\n          },\n          {\n             \"source\":\"John Jay Doe\",\n             \"target\":\"John Doe Company\",\n             \"relationship\":\"worked at\",\n             \"relationship_strength\":4\n          },\n          {\n             \"source\":\"John Jay Doe\",\n             \"target\":\"John Doe's Project\",\n             \"relationship\":\"created\",\n             \"relationship_strength\":2\n          },    \n   ]\n}\n</code></pre> Redis Arguments: <pre><code>```\n.JSON_scrape = Returned JSON file\n.user_last_method = 'scrape'\n```\n</code></pre>"},{"location":"Personal-AI-APIs/#chat-with-ai","title":"Chat with AI:","text":"<p>Creates a chat between an AI agent and the user. The objective is inquiring about the user professional accomplishments and extract those entities/relations from the conversation.</p>"},{"location":"Personal-AI-APIs/#create-conversation","title":"Create Conversation:","text":"<p>If the user already has a biography created on the app, this API generates personalized questions for the user, otherwise it uses generic questions to start.</p> <ul> <li>Endpoint = /create_conversation</li> <li>Method = GET<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>From Redis:<ul> <li>.name = name of the user</li> <li>.bio = user biography (optional)</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>If .bio is in Redis, returns 5 personalized questions, else returns 5 generic questions.</li> </ul> </li> </ul> </li> </ul> personalized_questions_example.json<pre><code>{\n    \"1\": {\n        \"message\": \"Hi John Doe, can you tell us about your experience as Vice President at John Doe Company?\",\n        \"topic\": \"Leadership Positions\"\n    },\n    \"2\": {\n        \"message\": \"Hello John Doe, what inspired you to pursue an MBA from the University Of John'Doe, and how has it impacted your career?\",\n        \"topic\": \"Education\"\n    },\n    \"3\": {\n        \"message\": \"Hi John Doe, can you walk us through your experience as Executive Director of Technology at John Doe's Business?\",\n        \"topic\": \"Leadership Positions\"\n    },\n    \"4\": {\n        \"message\": \"Hello John Doe, can you share with us your experience as Co-Founder at John Doe's Second Business, and what motivated you to start this venture?\",\n        \"topic\": \"Entrepreneurship\"\n    },\n    \"5\": {\n        \"message\": \"Hi John Doe, how do you stay up-to-date with the latest trends and technologies in your field, and how do you apply them in your work?\",\n        \"topic\": \"Professional Development\"\n    }\n}\n</code></pre> chat history<pre><code>[\n    {\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"text\": \"Let's start this conversation!\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749650098.343819\"\n    }\n]\n</code></pre> Redis Arguments: <pre><code>.history = Creates the chat history\n.questions = json with questions if not using generic questions\n</code></pre>"},{"location":"Personal-AI-APIs/#send-chosen-question","title":"Send Chosen Question:","text":"<p>Lets the user choose one of the five questions to start the conversation.</p> <ul> <li>Endpoint = /send_chosen_question</li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>user-input = One of the questions, chosen by the user</li> </ul> </li> <li>RETURNS:<ul> <li>Appends the chosen question to the chat history.</li> </ul> </li> </ul> </li> </ul> user-input (first question chosen)<pre><code>{\n    \"user-input\": \"Hello John Doe, what inspired you to pursue an MBA from the University Of John'Doe, and how has it impacted your career?\"\n}\n</code></pre> updated history<pre><code>[\n    {\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"text\": \"Let's start this conversation!\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749650098.343819\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"text\": \"Hello John Doe, what inspired you to pursue an MBA from the University Of John'Doe, and how has it impacted your career?\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749651681.779023\"\n    }\n]\n</code></pre> Redis Arguments: <pre><code>.history = Updates the chat history with chosen question\n</code></pre>"},{"location":"Personal-AI-APIs/#chat-session","title":"Chat Session:","text":"<p>Maintains the conversation between the AI agent and the user. </p> <ul> <li>Endpoint = /chat_session </li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>user-input = The user answers to the questions</li> </ul> </li> <li>RETURNS:<ul> <li>Keeps returning the chat response and questions until the user exits the conversation.</li> </ul> </li> </ul> </li> </ul> user-input (answers)<pre><code>{\n    \"user-input\": \"I pursued my MBA at the University of John Doe primarily to broaden my business acumen beyond my specialized field and to gain leadership skills for more strategic roles.\"\n}\n</code></pre> conversation history<pre><code>[\n    {\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"text\": \"Let's start this conversation!\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749650098.343819\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"text\": \"Hello John Doe, what inspired you to pursue an MBA from the University Of John'Doe, and how has it impacted your career?\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749651681.779023\"\n    },\n    {\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"text\": \"I pursued my MBA at the University of John Doe primarily to broaden my business acumen beyond my specialized field and to gain leadership skills for more strategic roles.\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749652482.474502\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"text\": \"Let's move on to your work experience. You've held various leadership positions, including Vice President at John Doe's Business. What specific challenges did you face in this role, and how did you overcome them?\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749652483.2849646\"\n    },\n    {\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"text\": \"At John Doe's Business, as VP, one significant challenge was prioritizing product development with limited resources while balancing diverse customer needs and market trends. We were a growing company, and everyone had great ideas, but we couldn't pursue them all at once. To overcome this, I implemented a more data-driven product roadmap strategy.\"\n            }\n        ]\n    },\n    {\n        \"role\": \"system\",\n        \"content\": \"1749652526.8790202\"\n    },\n    ...\n]\n</code></pre> Redis Arguments: <pre><code>.history = Updates the chat history with the entire conversation\n</code></pre>"},{"location":"Personal-AI-APIs/#extract-chat-information","title":"Extract Chat Information:","text":"<p>Extract a list of entities and relations from a conversation history.</p> <ul> <li>Endpoint = /extract_from_chat</li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>From Redis:<ul> <li>.name = name of the user</li> <li>.history = conversation history</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>A JSON file saved in Redis under JSON_chat</li> </ul> </li> </ul> </li> </ul> JSON_example.json<pre><code>{\n   \"entities\":[\n      {\n         \"person\":[\n            {\n               \"name\":\"John Jay Doe\",\n               \"description\":\"The person in the conversation\"\n            }\n         ],\n         \"education\":[\n            {\n               \"name\":\"University Of John'Doe\",\n               \"description\":\"A university where John Jay Doe earned his MBA\"\n            },\n            {\n               \"name\":\"University Of John'Doe\",\n               \"description\":\"A university mentioned in the conversation\"\n            }\n         ],\n         \"organization\":[\n            {\n               \"name\":\"John Doe's Business\",\n               \"description\":\"A company where John Jay Doe worked as VP\"\n            },\n            {\n               \"name\":\"John Doe's Business\",\n               \"description\":\"A company co-founded by John Jay Doe\"\n            }\n         ]\n      }\n   ],\n   \"relationships\":[\n      {\n         \"source\":\"John Jay Doe\",\n         \"target\":\"University Of John'Doe\",\n         \"relationship\":\"earned MBA from\",\n         \"relationship_strength\":4\n      },\n      {\n         \"source\":\"John Jay Doe\",\n         \"target\":\"University Of John'Doe\",\n         \"relationship\":\"pursued MBA from\",\n         \"relationship_strength\":4\n      },\n      {\n         \"source\":\"John Jay Doe\",\n         \"target\":\"John Doe's Business\",\n         \"relationship\":\"worked as VP\",\n         \"relationship_strength\":4\n      },\n      {\n         \"source\":\"John Jay Doe\",\n         \"target\":\"John Doe's Business\",\n         \"relationship\":\"co-founded\",\n         \"relationship_strength\":4\n      },\n      {\n         \"source\":\"John Jay Doe\",\n         \"target\":\"John Doe's Business\",\n         \"relationship\":\"implemented data-driven product roadmap\",\n         \"relationship_strength\":3\n      },\n      {\n         \"source\":\"John Jay Doe\",\n         \"target\":\"John Doe's Business\",\n         \"relationship\":\"identified market gap and created solution\",\n         \"relationship_strength\":3\n      }\n   ]\n}\n</code></pre> Redis Arguments: <pre><code>.JSON_chat = Returned JSON file\n.user_last_method = 'chat'\n</code></pre>"},{"location":"Personal-AI-APIs/#filter-entities-and-json-processor","title":"Filter Entities and JSON Processor:","text":"<p>This API will be called after any data aquiring API, the front end will pass all the entities found on the used method (CV, Web Search or Chat) and presents it to the user. This API will receive all entities selected that the user thinks represents his person and add them to a JSON file called JSON_combined.  This JSON file will have all the information selected by the user from all the methods he ever used, serving as a collection of all his extracted entities.  </p> <ul> <li>Endpoint = /json_processor</li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>json file = the entities selected by the user, to filter the json, will be saved as .chosen_entities in Redis.</li> <li>From Redis:<ul> <li>.name = name of the user</li> <li>.JSON_combined = if it already exists otherwise it's created</li> <li>.user_last_method = cv, scrape or chat, to know which json is being filtered</li> <li>.JSON_scrape/cv/chat = the json file from which the user came from (as in .user_last_method)</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>A JSON file saved in Redis under JSON_combined</li> </ul> </li> </ul> </li> </ul> chosen_entities json format<pre><code>{\n    \"categories\": [\n        {\n            \"type\": \"Person\",\n            \"tag\": \"John Jay Doe\"\n        },\n        {\n            \"type\": \"Organization\",\n            \"tag\": \"John Doe's Business\"\n        },\n        {\n            \"type\": \"Education\",\n            \"tag\": \"University Of John'Doe\"\n        },\n        {\n            \"type\": \"Organization\",\n            \"tag\": \"John Doe's Second Business\"\n        },\n        {\n            \"type\": \"Organization\",\n            \"tag\": \"John Doe Company\"\n        }\n    ]\n}\n</code></pre> JSON_combined_example.json<pre><code>{\n   \"person\":[\n      {\n         \"name\":\"John Jay Doe\",\n         \"description\":\"Executive with a diverse and international career\",\n         \"date\":\"\",\n         \"source\":[\n            \"User-sent Document\"\n         ]\n      }\n   ],\n   \"organization\":[\n      {\n         \"name\":\"John Doe's Business\",\n         \"description\":\"Vice President\",\n         \"date\":\"\",\n         \"source\":[\n            \"https://www.example-site2.com\"\n         ]\n      },\n      {\n         \"name\":\"John Doe's Second Business\",\n         \"description\":\"Executive Director of Tecnology\",\n      },\n      {\n         \"name\":\"John Doe Company\",\n         \"description\":\"Co-Founder\",\n         \"date\":\"\",\n         \"source\":[\n            \"User-sent Document\"\n         ]\n      }\n   ],\n   \"education\":[\n      {\n         \"name\":\"University Of John'Doe\",\n         \"description\":\"MBA\",\n      }\n   ]\n}\n</code></pre> Redis Arguments: <pre><code>.JSON_scrape/cv/chat_filtered = The respective json file but with only the entities selected by the user\n.user_last_method = '' ; after passing this method the user_last_method is reset so that the user can run another method from the start\n.JSON_combined = will have all entities selected by the user appended to it as long as they're not repeated\n</code></pre>"},{"location":"Personal-AI-APIs/#biography-and-picture","title":"Biography and Picture","text":"<p>After having some information on a JSON_combined file, the user will be able to have a short biography from it. From the biography he will be able to generate a random picture to use as an avatar. The user will also be able to edit/write his bio if he did not like the generated one. </p> <p>The following diagram summarizes this part of the APIs:</p> <pre><code>graph LR\n    A[Combined JSON]\n    B[Extract Biography]\n    C[Generate Picture]\n    subgraph Edit Biography\n        direction LR\n        D1[Get Selected Bio]\n        D2[Save Edited Bio]\n    end\n\n    A --&gt; B\n    B --&gt; D1\n    B --&gt; C\n    D1 &lt;--&gt; D2\n\n</code></pre>"},{"location":"Personal-AI-APIs/#extract-bio","title":"Extract Bio:","text":"<p>This API will generate a short biography based on the JSON_combined file. </p> <ul> <li>Endpoint = /extract_bio</li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>From Redis:<ul> <li>.name = name of the user</li> <li>.JSON_combined = if it already exists otherwise it's created</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>A short biography of the user, saved on Redis as .bio</li> </ul> </li> </ul> </li> </ul> Redis Arguments: <pre><code>.bio = User short biography\n.working_env = Describes the working environment of the user based on the biography. Used to generate a picture later.\n.JSON_combined = will have all entities selected by the user appended to it as long as they're not repeated\n</code></pre>"},{"location":"Personal-AI-APIs/#generate-picture","title":"Generate Picture:","text":"<p>Generates three possible images of the user based on a working environment that is based on his biography. Each image is generated with different ages in mind (20, 40 and 60 years).</p> <ul> <li>Endpoint = /get_profile_picture</li> <li>Method = GET<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>From Redis:<ul> <li>.name = name of the user</li> <li>.working_env = the working environment of the user based on the biography</li> </ul> </li> </ul> </li> <li>RETURNS:<ul> <li>Three base64 codes for images.</li> </ul> </li> </ul> </li> </ul> images result example<pre><code>{\n    \"data\": \"image/png\",\n    \"base64\": first_image_base64,\n    \"base64_2\": second_image_base64,\n    \"base64_3\": third_image_base64\n}\n</code></pre>"},{"location":"Personal-AI-APIs/#edit-biography","title":"Edit Biography","text":"<p>Allow the user edit his biography or write a new one. Also let the APIs know if they should use the edited biography or the generated one.</p>"},{"location":"Personal-AI-APIs/#get-selected-bio","title":"Get Selected Bio:","text":"<ul> <li>Endpoint = /get_selected_bio</li> <li>Method = PUT<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>bio-flag = manual/automatic - Sets the biography as manual (user edited) or automatic (generated).</li> </ul> </li> <li>RETURNS:<ul> <li>Sets bio-flag on Redis as manual or automatic</li> </ul> </li> </ul> </li> </ul> Redis Arguments: <pre><code>.bio-flag = manual or automatic\n</code></pre>"},{"location":"Personal-AI-APIs/#save-edited-bio","title":"Save Edited Bio:","text":"<p>Receives the new biography and saves it in Redis as .edited_bio.</p> <ul> <li>Endpoint = /save_edited_bio</li> <li>Method = POST<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>json file = The new biography</li> </ul> </li> <li>RETURNS:<ul> <li>Saves the new biography under .edited_bio in Redis</li> </ul> </li> </ul> </li> </ul> Redis Arguments: <pre><code>.edited_bio = new biography\n</code></pre>"},{"location":"Personal-AI-APIs/#front-end-only-api","title":"Front End only API","text":""},{"location":"Personal-AI-APIs/#get-session-data","title":"Get Session Data:","text":"<p>Used by the front end to get any data from the user session.</p> <ul> <li>Endpoint = /get_session_data</li> <li>Method = GET<ul> <li>INPUTS:<ul> <li>user-id = Identifies the user session</li> <li>session-data = any data from the session, all/history/etc.</li> </ul> </li> <li>RETURNS:<ul> <li>All/part of the user session data</li> </ul> </li> </ul> </li> </ul>"},{"location":"admonitions/","title":"Admonitions","text":"<p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"code-examples/","title":"Code examples","text":"<p>An example of a codeblock for python:</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>An example of a codeblock for python:</p> code-examples.js<pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"content-tab/","title":"Content tab","text":""},{"location":"content-tab/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tab/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered listPythonJavaScript <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol> <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"diagram-examples/","title":"Diagram Examples","text":""},{"location":"diagram-examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"gateway/","title":"API Gateway Setup Documentation","text":"<p>This document explains the setup of the API Gateway for the project Karrera - Personal AI project using Google Cloud API Gateway. The backend services are hosted on Google Compute Engine (VM), and the API is defined using OpenAPI 2.0. It explains how to use Google Cloud's fully managed API Gateway to securely expose an application running on a Compute Engine Virtual Machine (VM). This approach is ideal for centralizing API access, providing API key enforcement, and decoupling clients from your backend VM's network details, all without managing gateway infrastructure yourself.</p>"},{"location":"gateway/#overview-managed-api-gateways-for-vm-backends","title":"Overview: Managed API Gateways for VM backends","text":"<p>Google's API Gateway acts as a single entry point for all API calls, sitting in front of your backend services. When your backend is a Compute Engine VM, the API Gateway provides a managed layer that handles:</p> <ul> <li>Traffic Management: Routes incoming requests to your VM application.</li> <li>Security: Enforces API keys, providing a crucial layer of access control before requests even reach your VM.</li> <li>Decoupling: Hides the VM's internal IP address and specific network configuration from external clients.</li> <li>Observability: Integrates seamlessly with Cloud Monitoring and Cloud Logging for request tracing and performance insights.</li> <li>Scalability: The gateway itself is a serverless service, automatically scaling to handle traffic.</li> </ul> <p>This setup simplifies operations compared to running a custom gateway (self-managed) on a VM, as Google manages the gateway infrastructure, patching, and scaling.</p>"},{"location":"gateway/#architecture","title":"Architecture","text":"<p>In this architecture, the Google Cloud API Gateway acts as a proxy for your application running on a Compute Engine VM.</p> <ul> <li>Client: Makes requests to the public URL provided by the API Gateway.</li> <li>GCP API Gateway: <ul> <li>Receives external API requests.</li> <li>Enforces configured security policies (e.g., API key validation).</li> <li>Routes validated requests to your Compute Engine VM using its internal IP address.</li> <li>Handles response forwarding back to the client.</li> </ul> </li> <li>Backend: Flask API running on a Google Cloud VM<ul> <li>Hosts your API application (e.g., a web server, microservice).</li> <li>Listens for incoming requests on a specific port, typically on its internal IP address.</li> <li>Does not require an external IP address for direct client access, as all traffic is routed through the API Gateway.</li> </ul> </li> </ul> <pre><code>graph LR\n    subgraph External Clients\n        A[External Users/Applications]\n    end\n\n    subgraph API Gateway Layer\n        B[Google Cloud API Gateway]\n    end\n\n    subgraph Compute Engine VM/Backend Services\n        direction LR\n        C1[User Session Init]\n        C2[Search From Web ]\n        C3[CV Reader]\n    end\n\n    A -- HTTPS Requests --&gt; B\n\n    B -- Internal HTTP/S Requests --&gt; C1\n    B -- Internal HTTP/S Requests --&gt; C2\n    B -- Internal HTTP/S Requests --&gt; C3\n\n    style B fill:#3F704D,stroke:#39a0b9,stroke-width:2px,font-color:#000000\n    style C1 fill:#708238,stroke:#a039b9,stroke-width:2px,font-color:#000000\n    style C2 fill:#708238,stroke:#a039b9,stroke-width:2px,font-color:#000000\n    style C3 fill:#708238,stroke:#a039b9,stroke-width:2px,font-color:#000000\n</code></pre>"},{"location":"gateway/#implementation-steps","title":"Implementation Steps:","text":""},{"location":"gateway/#step-1-check-for-appropriate-permissions-in-gcp-recommended-iam-roles-and-best-practices","title":"Step 1: Check for appropriate permissions in GCP (Recommended IAM Roles and Best Practices):","text":"<p>Since we are running a VM on GCP, and working using this cloud, we firstly have to make sure we have the appropriate permissions to create and work on the API Gateway in Google Cloud, including the configuration of API key enforcement.</p> <p>Principle of Least Privilege: When assigning permissions, it's a security best practice to follow the Principle of Least Privilege (POLP). This means granting only the minimum permissions necessary for a task, rather than broad roles like \"Owner\" or \"Editor,\" which provide excessive access and increase security risks.</p>"},{"location":"gateway/#recommended-predefined-iam-roles","title":"Recommended Predefined IAM Roles","text":"<p>For a user or service account involved in creating, deploying, and managing an API Gateway with API key enforcement, the following roles are a good starting point:</p> <ol> <li> <p>API Gateway Admin (<code>roles/apigateway.admin</code>)</p> <ul> <li>Why it's used: This role grants comprehensive permissions for managing API Gateway resources directly. It allows the creation, updating, retrieval, and deletion of API definitions, API configurations (derived from your OpenAPI spec), and the API Gateway instances themselves.</li> <li>How it's used: Essential for the core operations of setting up and modifying your API Gateway, such as deploying new OpenAPI configurations or updating gateway settings.</li> </ul> </li> <li> <p>Service Management Administrator (<code>roles/servicemanagement.admin</code>)</p> <ul> <li>Why it's used: API Gateway relies on Google Cloud's Service Management infrastructure. When you deploy an API Gateway configuration, a \"managed service\" is created (e.g., <code>your-api.apigateway.your-project.cloud.goog</code>). This role provides the necessary permissions to create and manage these underlying services. This is often the critical role when encountering \"address not enabled for the project\" errors.</li> <li>How it's used: Enables the API Gateway to register its service in Service Management, making it discoverable and manageable within your project.</li> </ul> </li> <li> <p>Service Usage Admin (<code>roles/serviceusage.admin</code>)</p> <ul> <li>Why it's used: This role allows users to enable and disable Google Cloud APIs and services within a project. It's crucial for ensuring that necessary APIs (like the API Gateway API itself) are active for your project.</li> <li>How it's used: Used to enable the core <code>API Gateway API</code> (<code>apigateway.googleapis.com</code>) and other Google APIs that your backend services might rely on.</li> </ul> </li> <li> <p>API Keys Admin (<code>roles/serviceusage.apiKeysAdmin</code>)</p> <ul> <li>Why it's used: This role provides permissions for managing API keys, including creating, listing, updating, and deleting them. It's essential for generating and restricting the API keys that your clients will use to authenticate with your API Gateway.</li> <li>How it's used: Necessary for creating the API key in the Google Cloud Console and, crucially, for restricting it to your specific API Gateway service, ensuring it's only valid for your API.</li> </ul> </li> <li> <p>Compute Network Viewer (<code>roles/compute.networkViewer</code>) or Compute Network User (<code>roles/compute.networkUser</code>)</p> <ul> <li>Why it's used:  While API Gateway itself doesn't need to manage VM instances, the user deploying the gateway might need to view or interact with network resources (like internal IPs, firewall rules) to correctly configure the <code>x-google-backend.address</code> and ensure network connectivity.</li> <li>How it's used: To retrieve the VM's internal IP and verify firewall configurations.</li> </ul> </li> </ol>"},{"location":"gateway/#important-considerations","title":"Important Considerations","text":"<ul> <li> <p>Service Accounts for Automation:</p> <ul> <li>Always use a dedicated service account instead of a user account.</li> <li>Grant this service account only the specific roles listed above. This minimizes the blast radius of any potential security breaches.</li> </ul> </li> <li> <p>Enabling Necessary APIs:</p> <ul> <li>Before deploying your API Gateway, ensure that the core Google Cloud APIs it relies on are enabled in your project.</li> <li>Key APIs to enable:<ul> <li>API Gateway API (<code>apigateway.googleapis.com</code>)</li> <li> <p>The specific API Gateway created -- after its creation: When you deploy an API configuration to API Gateway, Google Cloud automatically creates a unique \"managed service\" in the background that represents your API. This service needs to be explicitly enabled in your project before the API Gateway can properly serve traffic and enforce API key restrictions. If this service is not enabled, you might encounter <code>PERMISSION_DENIED</code> errors, indicating that the API targeted by the request is not enabled for the project.</p> <p>Here's how to enable it:</p> <ol> <li> <p>Identify The Managed Service Name:</p> <ul> <li>During the API Config creation step (e.g., Step 3.2 in the full deployment guide), you should have noted down the \"Managed Service\" name. It typically follows this pattern: <code>YOUR_API_ID.apigateway.YOUR_PROJECT_ID.cloud.goog</code>.</li> <li>If you don't have it, you can find it by navigating to API Gateway &gt; APIs in the Google Cloud Console, selecting your API, and looking for the \"Managed Service\" column or property in the API details.</li> </ul> </li> <li> <p>Enable the Service via API Library:</p> <ul> <li>In the Google Cloud Console, go to APIs &amp; Services &gt; Library.</li> <li>In the search bar provided, paste or type the exact Managed Service name you identified in the previous step (e.g., <code>my-api-12345.apigateway.my-project.cloud.goog</code>).</li> <li>The search results should display your API's managed service. Click on it.</li> <li>On the service's details page, click the ENABLE button.</li> </ul> </li> </ol> <p>Once enabled, allow a few moments for the changes to propagate throughout Google Cloud's infrastructure. After this, your API Gateway should be ready to correctly route requests and enforce its configured security policies.</p> </li> </ul> </li> </ul> </li> <li> <p>API Key Restrictions (Crucial Security Practice):</p> <ul> <li>After creating an API key in Google Cloud, it is imperative to restrict it.</li> <li>How to restrict:<ol> <li>Go to APIs &amp; Services &gt; Credentials in the Google Cloud Console.</li> <li>Edit your API key.</li> <li>Under \"API restrictions,\" choose \"Restrict key.\"</li> <li>Select your specific API Gateway service (e.g., <code>YOUR_API_NAME.apigateway.YOUR_PROJECT_ID.cloud.goog</code>) from the dropdown.</li> <li>Additionally, you might want to restrict it to other relevant Google APIs like <code>API Gateway API</code> and <code>Service Control API</code>.</li> </ol> </li> <li>Why it's important: Restricting API keys ensures they can only be used to access the specific services you intend, preventing unauthorized access to other resources in your project if the key is compromised.</li> </ul> </li> </ul>"},{"location":"gateway/#step-2-define-api-specification","title":"Step 2: Define API Specification","text":"<ul> <li>Purpose:  Create an OpenAPI (Swagger 2.0) specification file (e.g., api-gateway-spec.yaml) that describes your API and tells the API Gateway how to route requests to your VM backend.</li> <li> <p>Activities:</p> <ol> <li>Define the basic info:<ul> <li>Standard: Swagger/OPEN API 2.0</li> <li>Title, Description, and Version of Configuration</li> </ul> </li> <li>Define all endpoints, methods, and expected behaviors</li> <li>Document request/response formats using OpenAPI 2.0 standards</li> <li>Specify path parameters, query strings, and body schemas</li> <li>Map API services to backend services, and define the timeout limit (600s)</li> <li>Add security scheme definitions (API keys for now)</li> </ol> </li> <li> <p>Key elements for a VM backend:</p> <ul> <li><code>x-google-backend.address</code>: This is the most crucial part. It must point to the internal IP address and port of your Compute Engine VM.</li> <li><code>securityDefinitions</code> and <code>security</code>: For API Key enforcement.</li> </ul> </li> <li> <p>Output: Here's a small version of the OpenAPI spec used:</p> </li> </ul> api-gateway-spec.yaml<pre><code># Basic information\nswagger: \"2.0\"\ninfo:\n  title: \"API Gateway Configuration Test\"\n  description: \"Test of Gateway\"\n  version: 1.0.0\n\n# Enforce API Key security\nsecurityDefinitions:\n  api_key:\n    type: \"apiKey\"\n    name: \"x-api-key\"\n    in: \"header\"\n\n# Require the api_key security scheme (defined above) for all paths and methods unless overridden.\nsecurity:\n- api_key: []\n\n# Sinece most of the methods consume and produce json texts, define a basic expected behavior (can be overriden)\nconsumes:\n  - application/json\nproduces:\n  - application/json\n\n# Define the backend address\nx-google-backend:\n  address: http://&lt;YOUR_VM_INTERNAL_IP&gt;:&lt;YOUR_APP_PORT&gt; \n  deadline: 600.0 ## the timeout limit, in seconds\n\n# Define each endpoint under paths\npaths:\n   # Endpoint name\n  /user_session_init:\n    # Endpoint request type\n    post:\n      # Write the basic information of this microsservice\n      operationId: userSessionInit\n      summary: Initializes a user session in Redis\n      description: Initializes a user session in Redis using the `name` and `user-id` from request headers.\n\n      # Write down what parameters the method takes\n      parameters:\n        - in: header # Where the parameter goes in the request\n          name: name # Name of the key\n          type: string # Type of the parameter\n          required: true # If it is required or not\n        - in: header\n          name: user-id\n          type: string\n          required: true\n\n      # Define Responses (required, but since we have already defined responses in our methods, not really necessary -- we can specify it later)\n      responses:\n        200:\n          description: OK\n</code></pre> <p>[!IMPORTANT]  Replace  and  with the Karrera VM's internal IP and the port."},{"location":"gateway/#step-3-create-and-deploy-the-api-gateway","title":"Step 3: Create and Deploy the API Gateway","text":"<ol> <li>Enable API Gateway API:<ul> <li>Go to APIs &amp; Services &gt; Library in the GCP Console.</li> <li>Search for \"API Gateway API\" and ensure it's enabled.</li> </ul> </li> <li>Create API Config:<ul> <li>In the GCP Console, navigate to API Gateway &gt; APIs.</li> <li>Click CREATE API.</li> <li>Give your API a display name (e.g., <code>vm-backend-api</code>).</li> <li>Click BROWSE under \"API spec\" and upload your <code>api-gateway-spec.yaml</code>file.</li> <li>Click CONTINUE.</li> <li>Take note of the \"Managed Service\" name (e.g., <code>my-api-12345.apigateway.my-project.cloud.goog</code>). This is important for API key restrictions.</li> <li>Click CREATE API CONFIG.</li> </ul> </li> <li>Create Gateway:<ul> <li>Once the API Config is created, navigate to API Gateway &gt; Gateways.</li> <li>Click CREATE GATEWAY.</li> <li>Gateway name: Choose a unique name (e.g., <code>my-vm-gateway</code>).</li> <li>Region: Select a region. Ideally, one close to your VM to minimize latency.</li> <li>API: Select the API you just created (e.g., vm-backend-api).</li> <li>API config: Select the API config you just created.</li> <li>Click CREATE GATEWAY.</li> <li>Wait for the gateway to deploy. Once complete, you'll see a default URL for your gateway (e.g., <code>https://my-vm-gateway-abc12def.ts.gateway.cloud.goog</code>).</li> </ul> </li> </ol>"},{"location":"gateway/#step-4-api-key-management","title":"Step 4: API Key Management","text":"<p>API Keys provide a simple yet effective mechanism for controlling access to your API Gateway. Proper management and restriction of these keys are vital for security.</p> <ol> <li> <p>Create an API Key:</p> <ul> <li>Navigate to the Google Cloud Console.</li> <li>Go to APIs &amp; Services &gt; Credentials.</li> <li>Click on CREATE CREDENTIALS &gt; API Key.</li> <li>A new API key string will be automatically generated. Copy this key immediately as you will need it for testing and client applications.</li> </ul> </li> <li> <p>Restrict the API Key (Crucial for Security):     Once created, an API key is by default unrestricted, meaning it could potentially be used to access any enabled API in your project. This is a significant security risk. The API key must be restricted to only allow access to the specific API Gateway.</p> <ul> <li>On the same Credentials page, locate the newly created API key.</li> <li>Click the EDIT API KEY icon (pencil) next to it.</li> <li>Under the API restrictions section, select the Restrict key radio button.</li> <li>From the \"Select APIs\" dropdown menu, select the following APIs:<ul> <li><code>API Gateway API</code> (<code>apigateway.googleapis.com</code>)</li> <li>Your specific Managed Service name (e.g., <code>my-api-12345.apigateway.my-project.cloud.goog</code>). You would have obtained this name during the API Config creation step (typically Step 3.2 in the full deployment guide).</li> </ul> </li> <li>Click OK to confirm your selections.</li> <li>Finally, click SAVE at the bottom of the page to apply the restrictions.</li> </ul> </li> </ol>"},{"location":"gateway/#step-5-testing-your-api-gateway","title":"Step 5: Testing Your API Gateway","text":"<p>Thorough testing is essential to confirm that your API Gateway is correctly configured, routing traffic, and enforcing API key security.</p> <ol> <li> <p>Test with API Key (Expected Success):     This test verifies that your API Gateway accepts valid API keys and successfully routes requests to your backend application.</p> <ul> <li>Open an API client like Postman, curl, or any preferred tool.</li> <li>Construct a request to your API Gateway's public URL. The URL format will be <code>https://&lt;YOUR_GATEWAY_URL&gt;/&lt;YOUR_API_PATH&gt;</code> (e.g., <code>https://my-vm-gateway-abc12def.ts.gateway.cloud.goog/my-app-endpoint</code>).</li> <li>Include a header: Add an <code>X-API-Key</code> header with the API key you copied from Step 4.1.     <pre><code>X-API-Key: &lt;YOUR_API_KEY&gt;\n</code></pre>     (Replace <code>&lt;YOUR_API_KEY&gt;</code> with your actual generated key.)</li> <li>Send the request.</li> <li>Expected Outcome: You should receive a successful HTTP <code>200 OK</code> response (or whatever success code your backend application returns) from your VM application, indicating the request was processed correctly.</li> </ul> </li> <li> <p>Test without API Key (Expected Failure):     This test confirms that your API Gateway's API key enforcement is active and blocking unauthorized access.</p> <ul> <li>Make the same request to your API Gateway URL as in the previous test.</li> <li>Crucially, do NOT include the <code>X-API-Key</code> header in this request.</li> <li>Send the request.</li> <li>Expected Outcome: You should receive an HTTP <code>401 Unauthorized</code> or <code>403 Forbidden</code> response. This indicates that the API Gateway successfully detected the missing API key and blocked the unauthorized request, confirming your security measures are working.</li> </ul> </li> </ol>"},{"location":"gateway/#step-6-monitoring-and-logging","title":"Step 6: Monitoring and Logging","text":"<p>Google Cloud API Gateway is deeply integrated with Cloud Logging and Cloud Monitoring, providing out-of-the-box observability for your API traffic and performance.</p> <ol> <li> <p>Cloud Logging (For Request Details and Errors):     Cloud Logging captures detailed logs for every request handled by your API Gateway, providing insights into traffic flow, latency, and any issues encountered.</p> <ul> <li>In the Google Cloud Console, navigate to Logging &gt; Logs Explorer.</li> <li>In the \"Resource\" filter, select <code>API Gateway Gateway</code>.</li> <li>You will see log entries for each request, including:<ul> <li>HTTP status codes (e.g., 200, 401, 500)</li> <li>Request latency</li> <li>Source IP addresses</li> <li>Details on backend communication</li> <li>Error messages (if any)</li> </ul> </li> <li>You can use the query builder to filter logs by <code>method</code>, <code>status</code>, <code>request_id</code>, and other parameters to troubleshoot specific issues.</li> </ul> </li> <li> <p>Cloud Monitoring (For Metrics and Performance):     Cloud Monitoring allows you to observe the performance and health of your API Gateway over time through various metrics.</p> <ul> <li>In the Google Cloud Console, go to Monitoring &gt; Metrics Explorer.</li> <li>In the \"Metric\" selector, search for \"API Gateway\" metrics. Key metrics to monitor include:<ul> <li><code>gateway/request_count</code>: Total number of requests received.</li> <li><code>gateway/error_count</code>: Number of requests resulting in errors.</li> <li><code>gateway/request_latencies</code>: Distribution of request latencies (useful for P50, P90, P99 analysis).</li> <li><code>gateway/consumed_bytes_count</code> / <code>gateway/produced_bytes_count</code>: Data transfer.</li> </ul> </li> <li>You can create custom dashboards to visualize these metrics tailored to your needs.</li> <li>Set up alerts based on thresholds (e.g., alert if error rate exceeds X% or latency goes above Y ms) to be proactively notified of potential issues.</li> </ul> </li> </ol>"}]}